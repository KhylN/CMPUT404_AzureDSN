from datetime import datetime
from django.db import models
import uuid
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, BaseUserManager

class UserManager(BaseUserManager):
    def create_user(self, username, email=None, password=None, **extra_fields):
        """
        Create a basic user
        """
        if not username:
            raise ValueError('The Username field must be set')

        email = self.normalize_email(email) if email else None
        user = self.model(username=username, email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, username, password=None, email=None, **extra_fields):
        """
        Create a superuser
        """
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)

        if extra_fields.get('is_staff') is not True:
            raise ValueError('Superuser must have is_staff=True.')
        if extra_fields.get('is_superuser') is not True:
            raise ValueError('Superuser must have is_superuser=True.')

        return self.create_user(username=username, email=email, password=password, **extra_fields)

class User(AbstractBaseUser, PermissionsMixin):
    # user unique ID's are generated by the database
    type = models.TextField(default="author", editable=False)
    email = models.EmailField(unique=True, null=True, blank=True)
    uuid = models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True)
    host = models.URLField(null=True) # The full API URL for the author's node (e.g. http://nodeaaaa/api/)
    username = models.CharField(max_length=20, unique=True)
    display_name = models.CharField(max_length=20)
    bio = models.TextField(null=True, blank=True)
    github = models.URLField(null=True, blank=True) # e.g. "http://github.com/gjohnson"
    page = models.URLField(null=True, blank=True) # e.g. "http://nodebbbb/authors/222"
    profile_image = models.TextField(null=True, blank=True) # to store data-url of image for profile pictures
    created_at = models.DateTimeField(default=datetime.now)
    modified_at = models.DateTimeField(auto_now=True) # Auto-update on every save

    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    objects = UserManager()

    USERNAME_FIELD = 'username'
    REQUIRED_FIELDS = ['display_name']

    def __str__(self):
        """String representation for the author object (useful for admin panels)."""
        return f"{self.display_name}: ({self.uuid})"
    
    def get_full_url(self):
        """
        Returns the unique URL for this author, which will look like:
        http://node1/api/authors/<uuid>
        """
        return f"{self.host}authors/{self.user_id}"


class NodeUser(User):
    """
    A specialized user type for nodes. Inherits from User but only utilizes specific fields.
    """

    # Make unused fields null.
    email = None
    bio = None
    github = None
    page = None
    display_name = "external"

    # Only require username, password, host (url of the remote node)
    # keep created_at and modified_at for consistency with other models
    # Add one more Boolean field that says if the node is authenticated or not (is_authenticated)
    is_authenticated = models.BooleanField(default=True)

    def save(self, *args, **kwargs):
        # Explicitly set profile_image to None to avoid file processing attempts
        self.profile_image = None
        self.display_name = self.username.upper()
        self.type = "node"
        super(NodeUser, self).save(*args, **kwargs)

